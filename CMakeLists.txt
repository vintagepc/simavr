#Simple CMake helper for SimAVR
#Just to help with changing submodules as the make system has some caching
#that can get annoying.

project(simavr)
cmake_minimum_required(VERSION 3.10)
set(simavr 1.0.0)

option(ENABLED_CORES "Specify a subset of cores to compile")

set(LIBRARY_NAME ${PROJECT_NAME})

file(GLOB SIMAVR_CORES_C ${PROJECT_SOURCE_DIR}/simavr/cores/*.c)
file(GLOB SIMAVR_CORES_H ${PROJECT_SOURCE_DIR}/simavr/cores/*.h)

file(GLOB SIMAVR_SIM_C ${PROJECT_SOURCE_DIR}/simavr/sim/*.c)
file(GLOB SIMAVR_SIM_H ${PROJECT_SOURCE_DIR}/simavr/sim/*.h)


set(simavr_sources
	${SIMAVR_SIM_C}
  )

# Not sure why these don't generate yet, we don't need them anyway.
set(SKIP_CORES
	"mega169"
	"mega328pb"
	"megax"
	"megax4"
	"megax8"
	"megaxm1"
	"tinyx4"
	"tinyx5"
)

set(SKIP_SOURCES
	"mega328pb"
)

# Helpers to generate the required headers:
foreach (CORE IN LISTS SIMAVR_CORES_C)
	get_filename_component(CORE_BASE ${CORE} NAME_WE)
	STRING(REGEX REPLACE "^sim_" "" CORE_FILE "${CORE_BASE}")
	STRING(TOUPPER "${CORE_FILE}" CORE_NAME)
	if (NOT "${CORE_FILE}" IN_LIST SKIP_SOURCES)
		list(APPEND simavr_sources "${CORE}")
	endif()
	if (ENABLED_CORES AND NOT "${CORE_FILE}" IN_LIST ENABLED_CORES)
		continue()
	endif()
	if ("${CORE_FILE}" IN_LIST SKIP_CORES)
		message(STATUS "skipped core ${CORE_FILE}")
		continue()
	endif()
	list(APPEND SIMAVR_ENABLED_CORES "${CORE_FILE}")
	list(APPEND SIMAVR_CORE_CONFIGS	"#define CONFIG_${CORE_NAME} 1")
	list(APPEND SIMAVR_CORE_DEFS "#if CONFIG_${CORE_NAME}" "extern avr_kind_t ${CORE_FILE}:" "#endif")
	list(APPEND SIMAVR_CORE_DECLS "#if CONFIG_${CORE_NAME}" "&${CORE_FILE}," "#endif")
endforeach()

message(STATUS "Enabled simavr cores: ${SIMAVR_ENABLED_CORES}")

string (REPLACE ";" "\n" SIMAVR_CORE_CONFIGS "${SIMAVR_CORE_CONFIGS}")
string (REPLACE ";" "\n" SIMAVR_CORE_DEFS "${SIMAVR_CORE_DEFS}")
string (REPLACE ":" ";" SIMAVR_CORE_DEFS "${SIMAVR_CORE_DEFS}")
string (REPLACE ";" "\n" SIMAVR_CORE_DECLS "${SIMAVR_CORE_DECLS}")

FILE (WRITE ${PROJECT_BINARY_DIR}/sim_core_config.h
"// Autogenerated by CMake - do not edit\n"
"#ifndef __SIM_CORE_CONFIG_H__\n"
"#define __SIM_CORE_CONFIG_H__\n"
"\n"
"#define CONFIG_SIMAVR_VERSION \"v1.6\"\n"
"${SIMAVR_CORE_CONFIGS}"
"\n\n#endif\n"
)

FILE (WRITE ${PROJECT_BINARY_DIR}/sim_core_decl.h
"#ifndef __SIM_CORE_DECL_H__\n"
"#define __SIM_CORE_DECL_H__\n"
"\n"
"#include \"sim_core_config.h\"\n"
"${SIMAVR_CORE_DEFS}"
"\n\n\n"
"extern avr_kind_t * avr_kind[];\n"
"avr_kind_t * avr_kind[] = {\n"
"${SIMAVR_CORE_DECLS}\n"
"NULL\n"
"};\n"
"\n\n#endif\n"
)


add_library(${LIBRARY_NAME} STATIC ${simavr_sources})

find_package(LibElf REQUIRED)
include_directories(${LIBELF_INCLUDE_DIRS})

target_include_directories(simavr PRIVATE
	"${PROJECT_SOURCE_DIR}/simavr/cores/"
	"${PROJECT_SOURCE_DIR}/simavr/cores/avr/"
	"${PROJECT_SOURCE_DIR}/simavr/sim/"
	"${PROJECT_SOURCE_DIR}/simavr/sim/avr/"
	"${PROJECT_BINARY_DIR}/"
)

target_compile_definitions(simavr PRIVATE
	"HAVE_LIBELF=1"
)

if (APPLE)
	target_include_directories(simavr PRIVATE
		"/usr/local/include/"
		"/opt/homebrew/include/"
	)
endif()

set_target_properties(${LIBRARY_NAME} PROPERTIES VERSION 1.6.0)

export(TARGETS ${LIBRARY_NAME} FILE ${PROJECT_NAME}-targets.cmake)
